name: Schedule build

on:
  schedule:
    # Run every 3 hours
    - cron: '0 15 * * *'
  workflow_dispatch:
    
jobs:
  check_releases:
    runs-on: ubuntu-latest
    steps:
    - name: check for new release
      shell: bash
      run: |
        echo "Retrieve rosenpass release versions"
        for RELEASE_NR in 0 1 .. 10
        do
          RELEASE=$(curl -s https://api.github.com/repos/rosenpass/rosenpass/tags | jq -r .[$RELEASE_NR].name) 
          if [[ "${RELEASE}" == *"whitepaper"* ]]; then
            echo "Release $RELEASE_NR is whitepaper release, progressing ..."
          elif [ -z "${RELEASE}" ] || [ "${RELEASE}" == "null" ]; then
            echo "Release $RELEASE_NR could not be retrieved, progressing ..."
          else
            echo "found latests release in Release Nr: $RELEASE_NR, with version $RELEASE"
            break
          fi
        done
        echo "RELEASE=$RELEASE" >> $GITHUB_ENV

        echo "Checking the latest version on GHCR"

        ORG_NAME="EMCL-Research-ITSecLab"
        PACKAGE_NAME="rosenpass"
                
        # Fetch latest tags
        status_code=$(curl -s -w "%{http_code}" -o response.json -H "Authorization: bearer ${{secrets.ACCESS_TOKEN}}" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/orgs/$ORG_NAME/packages/container/$PACKAGE_NAME/versions")
        ref=${{github.ref}}
        if [ "$status_code" -eq 404 ]; then
            echo "Package not found."
            LATEST_PUSHED_RELEASE=""
        elif [ "$status_code" -eq 200 ]; then
            if [[ "$ref" == *"develop"* ]]; then
              echo "Looking for a SNAPSHOT version in the released packages"
              for RELEASE_NR in 0 1 .. 10
              do
                LATEST_PUSHED_RELEASE=$(cat response.json | jq -r '.[$RELEASE_NR].name')
                if [[ ${LATEST_PUSHED_RELEASE} == *"SNAPSHOT"* ]]; then
                  echo "Found Latest release ${LATEST_PUSHED_RELEASE}. Continuing ..."
                  break
                else
                  echo "Found Latest release ${LATEST_PUSHED_RELEASE}. Not a SNAPSHOT, looking for SNAPSHOT release ..."
                fi
              done
            elif [[ "$ref" == *"main"* ]]; then
              echo "Looking for main release version"
              for RELEASE_NR in 0 1 .. 10
              do
                LATEST_PUSHED_RELEASE=$(cat response.json | jq -r '.[$RELEASE_NR].name')
                if [[ ${LATEST_PUSHED_RELEASE} == *"SNAPSHOT"*]]; then
                  echo "Found Latest release ${LATEST_PUSHED_RELEASE}. Is a SNAPSHOT, looking for non SNAPSHOT release ..."
                else
                  echo "Found Latest release ${LATEST_PUSHED_RELEASE}. Continuing ..."
                  break
                fi
              done
            fi
        else
            echo "Unexpected HTTP status code: $status_code"
            exit 1
        fi
        echo "LATEST_PUSHED_RELEASE=$LATEST_PUSHED_RELEASE" >> $GITHUB_ENV

        echo "comparing the latest official release with the latest release published by us"
        if [ "${RELEASE}" == "${LATEST_PUSHED_RELEASE}" ]; then
         echo "Version $RELEASE already pushed, exiting..."
         exit 0 
        else
          echo "New version: $RELEASE"
          echo "Latest version built: $LATEST_PUSHED_RELEASE"
          echo "Trigger build for new version"
          curl -X POST \
          -H "Authorization: token ${{ secrets.ACCESS_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/actions/workflows/release.yaml/dispatches \
          -d "{\"ref\":\"develop\",\"inputs\":{\"version\":\"$RELEASE\"}}"
        fi