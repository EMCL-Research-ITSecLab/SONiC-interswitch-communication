name: Schedule build

on:
  schedule:
    - cron: '0 15 * * *'
  workflow_dispatch:
    
jobs:
  check_releases:
    runs-on: ubuntu-latest
    steps:
    - name: check for new release
      shell: bash
      run: |
        echo "Retrieve rosenpass release versions"
        RELEASE=$(curl -o rosenpass_releases.json -s https://api.github.com/repos/rosenpass/rosenpass/tags | jq -r .[$RELEASE_NR].name) 
        release_counts=$(cat rosenpass_releases.json | jq '. | length')
        for RELEASE_NR in $(seq 0 $(($release_counts - 1)))
        do
          RELEASE=$(curl -s https://api.github.com/repos/rosenpass/rosenpass/tags | jq -r .[$RELEASE_NR].name) 
          if [[ "${RELEASE}" == *"whitepaper"* ]]; then
            echo "Release $RELEASE_NR is whitepaper release, progressing ..."
          elif [ -z "${RELEASE}" ] || [ "${RELEASE}" == "null" ]; then
            echo "Release $RELEASE_NR could not be retrieved, progressing ..."
          else
            echo "found latests release in Release Nr: $RELEASE_NR, with version $RELEASE"
            break
          fi
        done
        echo "RELEASE=$RELEASE" >> $GITHUB_ENV

        echo "Checking the latest version on Dockerhub"

        USERNAME=${{secrets.DOCKER_USERNAME}}
        IMAGENAME=rosenpass

        for ref in develop main
        do
          # Fetch latest tags
          status_code=$(curl -o response.json -w "%{http_code}"  -s "https://registry.hub.docker.com/v2/repositories/$USERNAME/$IMAGENAME/tags")
          result_count=$(cat response.json | jq '.results | length')
          echo "results: $result_count"
          if [ "$status_code" -eq 404 ]; then
              echo "Package not found."
              LATEST_PUSHED_RELEASE=""
          elif [ "$status_code" -eq 200 ]; then
              if [[ "$ref" == *"develop"* ]]; then
                echo "Looking for a SNAPSHOT version in the released packages"
                for RELEASE_NR in $(seq 0 $(($result_count - 1)))
                do
                  LATEST_PUSHED_RELEASE=$(cat response.json | jq --argjson RELEASE_NR "$RELEASE_NR" -r '.results[$RELEASE_NR].name')
                  if [[ ${LATEST_PUSHED_RELEASE} == *"SNAPSHOT"* ]]; then
                    echo "Found Latest release ${LATEST_PUSHED_RELEASE}. Continuing ..."
                    break
                  else
                    echo "Found Latest release ${LATEST_PUSHED_RELEASE}. Not a SNAPSHOT, looking for SNAPSHOT release ..."
                  fi
                done
              elif [[ "$ref" == *"main"* ]]; then
                echo "Looking for main release version"
                for RELEASE_NR in $(seq 0 $(($result_count - 1)))
                do
                  LATEST_PUSHED_RELEASE=$(cat response.json | jq --argjson RELEASE_NR "$RELEASE_NR" -r '.results[$RELEASE_NR].name')
                  if [[ ${LATEST_PUSHED_RELEASE} == *"SNAPSHOT"* ]]; then
                    echo "Found Latest release ${LATEST_PUSHED_RELEASE}. Is a SNAPSHOT, looking for non SNAPSHOT release ..."
                  else
                    echo "Found Latest release ${LATEST_PUSHED_RELEASE}. Continuing ..."
                    break
                  fi
                done
              fi
              if [ -z $LATEST_PUSHED_RELEASE ]; then
                echo "Found the registry repository, but could not find latest version in the tags"
              fi
          else
              echo "Unexpected HTTP status code: $status_code"
              break
          fi
          echo "LATEST_PUSHED_RELEASE=$LATEST_PUSHED_RELEASE" >> $GITHUB_ENV

          echo "comparing the latest official release with the latest release published by us"
          # Append a snapshot to the release name for the dev branch
          if [[ "$ref" == *"develop"* && "${RELEASE}-SNAPSHOT" == "${LATEST_PUSHED_RELEASE}" ]]; then
            echo "Version $RELEASE-SNAPSHOT already pushed, skipping..."
          elif [[ "$ref" == *"main"* && "${RELEASE}" == "${LATEST_PUSHED_RELEASE}" ]]; then
            echo "Version $RELEASE already pushed, skipping..."
          else
            echo "New version: $RELEASE"
            echo "Latest version built: $LATEST_PUSHED_RELEASE"
            echo "Trigger build for new version and branch $ref"
            curl -X POST \
            -H "Authorization: token ${{ secrets.ACCESS_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/release.yaml/dispatches \
            -d "{\"ref\":\"$ref\",\"inputs\":{\"version\":\"$RELEASE\"}}"
          fi
        done